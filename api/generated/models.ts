/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    paths: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Stub for PostDocument schema */
        PostDocument: Record<string, never>;
        MediaDocument: components["schemas"]["BaseModel_BaseModel"] & {
            brandId?: string;
            blobUrl?: string;
            /** @enum {string} */
            mediaType?: "image" | "video";
            mediaMetadata?: components["schemas"]["MediaMetadata_MediaMetadata"];
        };
        ContentGenerationTemplateDocument: components["schemas"]["BaseModel_BaseModel"] & {
            brandId?: string;
            templateInfo?: components["schemas"]["TemplateInfo_TemplateInfo"];
            schedule?: components["schemas"]["Schedule_Schedule"];
            settings?: components["schemas"]["TemplateSettings_TemplateSettings"];
        };
        BrandDocument: components["schemas"]["BaseModel_BaseModel"] & {
            user_id?: string;
            brand_info?: components["schemas"]["BrandInfo"];
            socialAccounts?: components["schemas"]["SocialAccountEntry_SocialAccountEntry"][];
        };
        TemplateSettings: {
            prompt_template?: components["schemas"]["PromptTemplate_PromptTemplate"];
            visual_style?: components["schemas"]["VisualStyleObj_VisualStyleObj"];
            contentItem?: components["schemas"]["ContentItem_ContentItem"];
        };
        TemplateInfo: {
            name?: string;
            description?: string;
            contentType?: components["schemas"]["ContentType"];
            socialAccounts?: components["schemas"]["Platform"][];
        };
        PromptVariable: {
            name?: string;
            values?: string[];
            description?: string;
        };
        PromptTemplate: {
            system_prompt?: string;
            user_prompt?: string;
            temperature?: number;
            max_tokens?: number;
            model?: string;
            variables?: components["schemas"]["PromptVariable"][];
        };
        VisualStyleObj: {
            themes?: components["schemas"]["VisualStyle"][];
        };
        VisualStyle: {
            font?: {
                /** @description Font family for the overlay text (e.g., Arial). */
                family: string;
                /** @description Font size (e.g., "32px"). */
                size: string;
                /**
                 * @description Font weight for the overlay text.
                 * @enum {string}
                 */
                weight?: "normal" | "bold";
                /**
                 * @description Font style for the overlay text.
                 * @enum {string}
                 */
                style?: "normal" | "italic";
            };
            color?: {
                /** @description Color for the overlay text (e.g., "#000000"). */
                text: string;
                /** @description Background color for the overlay area (e.g., "#FFFFFF"). */
                background: string;
                /** @description Color of the text box background (e.g., "#000000"). */
                box?: string;
                /** @description Color for text outline (if supported). */
                outline?: string;
            };
            outline?: {
                /** @description Color for text outline (if supported). */
                color?: string;
                width?: number;
            };
        };
        TextStyle: {
            font?: components["schemas"]["Font"];
            font_color?: string;
            outline?: components["schemas"]["Outline"];
            alignment?: components["schemas"]["Alignment"];
        };
        OverlayBox: {
            color?: string;
            transparency?: number;
            vertical_location?: string;
            horizontal_location?: string;
        };
        Outline: {
            color?: string;
            width?: number;
        };
        /** @description Font definitions for use by both backend and frontend */
        Fonts: {
            family?: string;
            display_name?: string;
            styles?: {
                regular?: string;
                bold?: string;
                italic?: string;
                bold_italic?: string;
            };
        }[];
        Font: {
            family?: string;
            size?: string;
            weight?: string;
            style?: string;
        };
        Alignment: {
            text_align?: string;
        };
        SocialAccountEntry: {
            platform?: components["schemas"]["Platform"];
            account?: components["schemas"]["SocialAccount"];
        };
        SocialAccount: {
            /** @description Unique identifier for the social account */
            id: string;
            /** @description Username for the social account */
            username: string;
            /** @description OAuth access token */
            accessToken: string;
            /** @description URL to the user's profile */
            profileUrl: string;
            /**
             * Format: date-time
             * @description Token expiration timestamp
             */
            expiry_date: string;
        };
        /** @enum {string} */
        Platform: "instagram" | "facebook" | "twitter" | "tiktok";
        TimeSlot: {
            /** @description Hour in 24-hour format */
            hour: number;
            /** @description Minute */
            minute: number;
            /** @description Timezone string (e.g., 'America/New_York') */
            timezone: string;
        };
        Schedule: {
            days_of_week: ("monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday" | "sunday")[];
            time_slots: components["schemas"]["TimeSlot"][];
        };
        Video: {
            media_type?: components["schemas"]["MediaType"];
            set_url?: string;
            visualStyle?: components["schemas"]["VisualStyle"];
        };
        MultiImage: {
            images?: components["schemas"]["Image_Image"][];
            min_images?: number;
            max_images?: number;
        };
        /** @enum {string} */
        MediaType: "Color" | "Set" | "Uploaded" | "Online";
        MediaMetadata: {
            fileName: string;
            description?: string;
            tags: string[];
            suggestedName?: string;
            cognitiveData: components["schemas"]["CognitiveData_CognitiveData"];
        };
        Image: {
            media_type?: components["schemas"]["MediaType"];
            set_url?: string;
            visualStyle?: components["schemas"]["VisualStyle"];
        };
        Rectangle: {
            x: number;
            y: number;
            w: number;
            h: number;
        };
        CognitiveTag: {
            name: string;
            confidence: number;
        };
        CognitivePerson: {
            confidence: number;
            rectangle: components["schemas"]["Rectangle"];
        };
        CognitiveObject: {
            object: string;
            confidence: number;
            rectangle: components["schemas"]["Rectangle"];
        };
        CognitiveDenseCaption: {
            text: string;
            confidence: number;
            boundingBox: components["schemas"]["Rectangle"];
        };
        CognitiveData: {
            tags?: components["schemas"]["CognitiveTag"][];
            categories?: components["schemas"]["CognitiveCategory"][];
            objects?: components["schemas"]["CognitiveObject"][];
            caption?: components["schemas"]["CognitiveCaption"];
            denseCaptions?: components["schemas"]["CognitiveDenseCaption"][];
            brands?: components["schemas"]["CognitiveBrand"][];
            people?: components["schemas"]["CognitivePerson"][];
            ocrText?: string;
        };
        CognitiveCategory: {
            name: string;
            confidence: number;
        };
        CognitiveCaption: {
            text: string;
            confidence: number;
        };
        CognitiveBrand: {
            name: string;
            confidence: number;
        };
        Text: {
            value?: string;
        };
        Metadata: {
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            created_date: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updated_date: string;
            /** @description Whether the record is active or soft-deleted */
            is_active: boolean;
        };
        /** @description Standard error response object */
        Error: {
            /** @description Error code identifier */
            code: string;
            /** @description Human-readable error message */
            message: string;
            /** @description Optional additional error details */
            details?: string | null;
        };
        /** @enum {string} */
        ContentType: "text" | "video" | "multi_image" | "image";
        ContentItem: {
            text?: components["schemas"]["Text"];
            image?: components["schemas"]["Image"];
            video?: components["schemas"]["Video"];
            multiImage?: components["schemas"]["MultiImage"];
        };
        BrandInfo: {
            name?: string;
            description?: string;
        };
        BaseModel: {
            /** @description unique identifier for the record */
            id: string;
            metadata: components["schemas"]["Metadata"];
        };
        /** @description Payload for updating a ContentGenerationTemplateDocument. All fields are optional and may be provided for partial update.
         *      */
        ContentGenerationTemplateUpdate: {
            brandId?: string;
            templateInfo?: components["schemas"]["TemplateInfo"];
            schedule?: components["schemas"]["Schedule"];
            settings?: components["schemas"]["TemplateSettings"];
            deleted?: boolean;
        };
        /** @description Minimal response schema for ContentGenerationTemplateDocument creation or deletion.
         *      */
        ContentGenerationTemplateResponse: {
            id?: string;
            brandId?: string;
        };
        /** @description Response schema for retrieving a ContentGenerationTemplateDocument by id or brandId.
         *      */
        ContentGenerationTemplateGet: components["schemas"]["ContentGenerationTemplateDocument_ContentGenerationTemplateDocument"];
        /** @description Payload for deleting a ContentGenerationTemplateDocument by id.
         *      */
        ContentGenerationTemplateDelete: {
            id: string;
        };
        /** @description Payload for creating a new ContentGenerationTemplateDocument. 'brandId' and 'templateInfo' are required.
         *      */
        ContentGenerationTemplateCreate: {
            brandId: string;
            templateInfo: components["schemas"]["TemplateInfo"];
            schedule?: components["schemas"]["Schedule"];
            settings?: components["schemas"]["TemplateSettings"];
        };
        /** @description Payload for updating a Brand. All fields are optional and may be provided for partial update.
         *      */
        BrandUpdate: {
            brandInfo?: components["schemas"]["BrandInfo"];
            socialAccounts?: components["schemas"]["SocialAccountEntry"][];
        };
        /** @description Minimal response schema for Brand creation or deletion.
         *      */
        BrandResponse: {
            id?: string;
            name?: string;
        };
        /** @description Response schema for retrieving a Brand by id or user_id.
         *      */
        BrandGet: components["schemas"]["BrandDocument_BrandDocument"];
        /** @description Payload for deleting a Brand by id.
         *      */
        BrandDelete: {
            id: string;
        };
        /** @description Payload for creating a new Brand. Only 'brandInfo' is required.
         *      */
        BrandCreate: {
            brandInfo: components["schemas"]["BrandInfo"];
        };
        BaseModel_BaseModel: {
            /** @description unique identifier for the record */
            id: string;
            metadata: components["schemas"]["Metadata"];
        };
        CognitiveObject_CognitiveObject: {
            object: string;
            confidence: number;
            rectangle: components["schemas"]["Rectangle"];
        };
        CognitiveDenseCaption_CognitiveDenseCaption: {
            text: string;
            confidence: number;
            boundingBox: components["schemas"]["Rectangle"];
        };
        CognitivePerson_CognitivePerson: {
            confidence: number;
            rectangle: components["schemas"]["Rectangle"];
        };
        CognitiveData_CognitiveData: {
            tags?: components["schemas"]["CognitiveTag"][];
            categories?: components["schemas"]["CognitiveCategory"][];
            objects?: components["schemas"]["CognitiveObject_CognitiveObject"][];
            caption?: components["schemas"]["CognitiveCaption"];
            denseCaptions?: components["schemas"]["CognitiveDenseCaption_CognitiveDenseCaption"][];
            brands?: components["schemas"]["CognitiveBrand"][];
            people?: components["schemas"]["CognitivePerson_CognitivePerson"][];
            ocrText?: string;
        };
        MediaMetadata_MediaMetadata: {
            fileName: string;
            description?: string;
            tags: string[];
            suggestedName?: string;
            cognitiveData: components["schemas"]["CognitiveData_CognitiveData"];
        };
        TemplateInfo_TemplateInfo: {
            name?: string;
            description?: string;
            contentType?: components["schemas"]["ContentType"];
            socialAccounts?: components["schemas"]["Platform"][];
        };
        Schedule_Schedule: {
            days_of_week: ("monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday" | "sunday")[];
            time_slots: components["schemas"]["TimeSlot"][];
        };
        PromptTemplate_PromptTemplate: {
            system_prompt?: string;
            user_prompt?: string;
            temperature?: number;
            max_tokens?: number;
            model?: string;
            variables?: components["schemas"]["PromptVariable"][];
        };
        VisualStyleObj_VisualStyleObj: {
            themes?: components["schemas"]["VisualStyle"][];
        };
        Image_Image: {
            media_type?: components["schemas"]["MediaType"];
            set_url?: string;
            visualStyle?: components["schemas"]["VisualStyle"];
        };
        Video_Video: {
            media_type?: components["schemas"]["MediaType"];
            set_url?: string;
            visualStyle?: components["schemas"]["VisualStyle"];
        };
        MultiImage_MultiImage: {
            images?: components["schemas"]["Image_Image"][];
            min_images?: number;
            max_images?: number;
        };
        ContentItem_ContentItem: {
            text?: components["schemas"]["Text"];
            image?: components["schemas"]["Image_Image"];
            video?: components["schemas"]["Video_Video"];
            multiImage?: components["schemas"]["MultiImage_MultiImage"];
        };
        TemplateSettings_TemplateSettings: {
            prompt_template?: components["schemas"]["PromptTemplate_PromptTemplate"];
            visual_style?: components["schemas"]["VisualStyleObj_VisualStyleObj"];
            contentItem?: components["schemas"]["ContentItem_ContentItem"];
        };
        SocialAccountEntry_SocialAccountEntry: {
            platform?: components["schemas"]["Platform"];
            account?: components["schemas"]["SocialAccount"];
        };
        ContentGenerationTemplateDocument_ContentGenerationTemplateDocument: components["schemas"]["BaseModel"] & {
            brandId?: string;
            templateInfo?: components["schemas"]["TemplateInfo"];
            schedule?: components["schemas"]["Schedule"];
            settings?: components["schemas"]["TemplateSettings"];
        };
        BrandDocument_BrandDocument: components["schemas"]["BaseModel"] & {
            user_id?: string;
            brand_info?: components["schemas"]["BrandInfo"];
            socialAccounts?: components["schemas"]["SocialAccountEntry"][];
        };
    };
    responses: {
        /** @description Authentication required */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "UNAUTHORIZED",
                 *       "message": "Valid API key required"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Rate limit exceeded */
        RateLimitExceeded: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "RATE_LIMIT_EXCEEDED",
                 *       "message": "Rate limit exceeded"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "RESOURCE_NOT_FOUND",
                 *       "message": "The requested resource was not found"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Invalid request parameters */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "INVALID_INPUT",
                 *       "message": "Invalid request parameters"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        pagination: {
            /** @default 20 */
            limit?: number;
            /** @default 0 */
            offset?: number;
            /**
             * @default created_at
             * @enum {string}
             */
            sort_by?: "created_at" | "updated_at" | "name";
            /**
             * @default desc
             * @enum {string}
             */
            sort_order?: "asc" | "desc";
        };
        /** @description resource identifier (uuid) */
        id: string;
        /**
         * @description filter criteria in the format field:operator:value (e.g., name:contains:test)
         * @example name:contains:acme
         */
        filter: string;
        /** @description brand identifier (uuid) */
        brand_id: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
